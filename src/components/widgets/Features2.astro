---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import ItemGrid2 from '~/components/ui/ItemGrid2.astro';
import Button from '~/components/ui/Button.astro';
import type { Features as Props } from '~/types';

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	tagline = await Astro.slots.render('tagline'),
	text = await Astro.slots.render('text'),
	actions = await Astro.slots.render('actions'),
	items = [],
	columns = 3,
	defaultIcon,

	id,
	isDark = false,
	classes = {},
	bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
	<Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
	
	<ItemGrid2
		items={items}
		columns={columns}
		defaultIcon={defaultIcon}
		classes={{
		container: 'gap-6 md:gap-16 max-w-5xl mx-auto ',
		panel: 'p-0 items-center text-center',
		// panel:
		//   "text-center bg-page items-center md:text-left rtl:md:text-right md:items-start p-6 p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-800",
		icon: 'w-12 h-12 mb-6 text-primary',
		...((classes?.items as Record<string, never>) ?? {}),
		}}
	/>

	{ text && <div class="md:text-center mt-24 max-w-3xl text-sm mx-auto italic font-light text-muted leading-normal" set:html={text} /> }

	{
		actions && (
		<div class="mt-20 max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row justify-center gap-4 ">
			{Array.isArray(actions) ? (
			actions.map((action) => (
				<div class="flex w-full sm:w-auto">
				<Button {...(action || {})} class="w-full sm:mb-0" />
				</div>
			))
			) : (
			<Fragment set:html={actions} />
			)}
		</div>
		)
	}


</WidgetWrapper>
