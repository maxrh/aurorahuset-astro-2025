---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import type { Features as Props } from '~/types';

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	tagline = await Astro.slots.render('tagline'),
	text = await Astro.slots.render('text'),
	actions = await Astro.slots.render('actions'),
	items = [],
	columns = 2,
	defaultIcon,

	id,
	isDark = false,
	classes = {},
	bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl ${classes?.container ?? ''}`} bg={bg}>
	<Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
		
	<ItemGrid
		items={items}
		columns={columns}
		defaultIcon={defaultIcon}
		classes={{
			container: 'max-w-5xl mx-auto',
			title: 'md:text-[1.3rem]',
			icon: 'text-stone-50 bg-primary dark:text-contrast rounded-full w-10 h-10 p-2 md:w-12 md:h-12 md:p-3 mr-6 rtl:ml-4 rtl:mr-0',
			...((classes?.items as Record<string, never>) ?? {}),
		}}
	/>
	{ text && <div class="md:text-center mt-20 max-w-3xl text-sm mx-auto italic  font-light text-muted leading-normal intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter" set:html={text} /> }

	{
		actions && (
		<div class="mt-20 max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row justify-center gap-4 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
			{Array.isArray(actions) ? (
			actions.map((action) => (
				<div class="flex w-full sm:w-auto">
				<Button {...(action || {})} class="w-full sm:mb-0" />
				</div>
			))
			) : (
			<Fragment set:html={actions} />
			)}
		</div>
		)
	}
	
</WidgetWrapper>
