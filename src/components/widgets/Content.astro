---
import type { Content as Props } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	tagline,
	content = await Astro.slots.render('content'),
	actions = await Astro.slots.render('actions'),
	items = [],
	columns,
	image = await Astro.slots.render('image'),
	isReversed = false,
	isAfterContent = false,

	id,
	isDark = false,
	classes = {},
	bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
	id={id}
	isDark={isDark}
	containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
	bg={bg}
>
	<Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} 

	/>
	<div class="max-w-7xl mx-auto">
		{content && <div class="mb-6 text-lg " set:html={content} />}

		<div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-20`}>
			
			<div class="md:py-4 md:basis-2/3 ">
				<ItemGrid
					items={items}
					columns={columns}
					defaultIcon="tabler:point-filled"
					classes={{
						container: `gap-y-4 md:gap-y-4`,
						panel: 'max-w-none',
						title: 'text-xl font-semibold leading-6 rtl:ml-0 rtl:mr-2',
						description: 'mt-2 text-muted rtl:ml-0 rtl:mr-2',
						icon: 'flex h-7 w-7 items-center justify-center rounded-full text-primary mr-4',
						action: 'text-lg font-medium leading-6 rtl:ml-0 rtl:mr-2',
					}}
				/>

				
			</div>
			<div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/3 ">
				{
					image && (
						<div class="relative m-auto max-w-4xl md:h-full">
							{typeof image === 'string' ? (
								<Fragment set:html={image} />
							) : (
								<Image
									class="inset-0 object-cover object-top w-full rounded-xl md:absolute md:h-full intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
									width={500}
									height={500}
									widths={[400, 768]}
									sizes="(max-width: 768px) 100vw, 432px"
									layout="cover"
									{...image}
								/>
							)}
						</div>
					)
				}
			</div>
		</div>
	</div>
	{
		actions && (
			<div class="mt-24 flex flex-nowrap flex-col sm:flex-row gap-4 justify-center">
				{Array.isArray(actions) ? (
					actions.map((action) => (
						<div class="flex w-full sm:w-auto">
							<Button {...(action || {})} class="w-full sm:mb-0" />
						</div>
					))
				) : (
					<Fragment set:html={actions} />
				)}
			</div>
		)
	}
</WidgetWrapper>
